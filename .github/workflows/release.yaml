name: Go Build and Release

on:
  push:
    tags:
      - 'v*' # 触发条件：推送 tag
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the release'
        required: true
        default: 'v2.5.8-Beta.3'

permissions:
  contents: write

env:
  PROJECT_NAME: ${{ github.event.repository.name }}
  BUILD_DATE: ${{ github.run_id }}
  VERSION: ${{ github.ref_name }}
  RELEASE_DIR: release
  RELEASE_NOTICES: |
    - [👏] 新版本支持新平台随行课堂
    - [👏] 随行课堂支持秒刷完成度
    - [👏] 随行课堂支持学时提交累计
    - [‍🔧] 学习通修复拉取章节信息触发人脸问题
    - [‍🔧] 学习通修复外置题库功能部分BUG
    
    注：此版本答题功能正在重构中，所以可能无法正常答题，若想要正常答题请先使用老版本，以及如果有用户提供账号测试开发新版本答题将感激不尽。

jobs:
  build:
    name: Build (${{ matrix.os }}-${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            goos: linux
          - os: ubuntu-latest
            arch: arm64
            goos: linux
          - os: windows-latest
            arch: amd64
            goos: windows
          # 如果需要 armv7 (32位) 交叉编译，加下面一行
          # - os: ubuntu-latest
          #   arch: arm
          #   goos: linux

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev pkg-config gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Get dependencies
        if: runner.os=='Linux'
        run: |
          export GOPROXY=direct
          export GONOSUMDB=*
          rm -rf go.sum
          go clean -modcache
          go env -w GOSUMDB=off
          go mod tidy
      - name: Get dependencies
        if: runner.os=='Windows'
        run: |
          set GOPROXY=direct
          set GONOSUMDB=*
          go clean -modcache
          del go.sum
          go get -u ./...
          go mod tidy

      - name: Prepare Release Directory
        run: mkdir -p ${{ env.RELEASE_DIR }}/yatori-go-console.${{ env.VERSION }}-${{ matrix.goos }}-${{ matrix.arch }}-release

      - name: Build
        run: |
          CGO_ENABLED=1 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.arch }} go build -o ${{ env.RELEASE_DIR }}/yatori-go-console.${{ env.VERSION }}-${{ matrix.goos }}-${{ matrix.arch }}-release/${{ env.PROJECT_NAME }}${{ matrix.goos == 'windows' && '.exe' || '' }}

      - name: Package
        run: |
          if [ "${{ matrix.goos }}" = "windows" ]; then
            copy command\\config.yaml ${{ env.RELEASE_DIR }}\\yatori-go-console.${{ env.VERSION }}-windows-${{ matrix.arch }}-release
            copy command\\start.bat ${{ env.RELEASE_DIR }}\\yatori-go-console.${{ env.VERSION }}-windows-${{ matrix.arch }}-release
            cd ${{ env.RELEASE_DIR }}
            Compress-Archive -Path "yatori-go-console.${{ env.VERSION }}-windows-${{ matrix.arch }}-release" -DestinationPath "yatori-go-console.${{ env.VERSION }}-windows-${{ matrix.arch }}-release.zip"
            Remove-Item -Recurse -Force "yatori-go-console.${{ env.VERSION }}-windows-${{ matrix.arch }}-release"
            cd ..
          else
            cp command/config.yaml ${{ env.RELEASE_DIR }}/yatori-go-console.${{ env.VERSION }}-${{ matrix.goos }}-${{ matrix.arch }}-release
            cd ${{ env.RELEASE_DIR }}
            tar -czvf yatori-go-console.${{ env.VERSION }}-${{ matrix.goos }}-${{ matrix.arch }}-release.tar.gz yatori-go-console.${{ env.VERSION }}-${{ matrix.goos }}-${{ matrix.arch }}-release
            rm -rf yatori-go-console.${{ env.VERSION }}-${{ matrix.goos }}-${{ matrix.arch }}-release
            cd ..
          fi

      - name: Upload Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.RELEASE_DIR }}/*
          tag_name: ${{ env.VERSION }}
          body: ${{ env.RELEASE_NOTICES }}
          draft: false
          prerelease: false
